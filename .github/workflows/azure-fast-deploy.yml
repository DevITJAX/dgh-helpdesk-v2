name: Deploy to Azure Container Instances (Fast)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests for quick deployment'
        required: false
        default: false
        type: boolean
      service:
        description: 'Service to build/deploy (all|backend|frontend)'
        required: false
        default: all
        type: choice
        options: [all, backend, frontend]

env:
  AZURE_CONTAINER_REGISTRY: dghhelpdesk.azurecr.io
  CONTAINER_NAME_BACKEND: dgh-helpdesk-backend
  CONTAINER_NAME_FRONTEND: dgh-helpdesk-frontend
  RESOURCE_GROUP: dgh-helpdesk-rg
  LOCATION: "West US 2"

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    # Only run tests when manually dispatched unless explicitly requested otherwise
    if: ${{ github.event_name == 'workflow_dispatch' && !inputs.skip_tests }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run backend tests
      run: |
        cd backend
        mvn clean test
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci --legacy-peer-deps
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false --passWithNoTests

  build-and-push:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [ ]
    strategy:
      matrix:
        service: [backend, frontend]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Login to Azure Container Registry
      run: |
        az acr login --name dghhelpdesk

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Docker meta (tags/labels) - backend
      id: meta-backend
      if: matrix.service == 'backend'
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME_BACKEND }}
        tags: |
          type=raw,value=latest
          type=sha

    - name: Docker meta (tags/labels) - frontend
      id: meta-frontend
      if: matrix.service == 'frontend'
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME_FRONTEND }}
        tags: |
          type=raw,value=latest
          type=sha
    
    - name: Build and push backend (cached)
      uses: docker/build-push-action@v6
      if: matrix.service == 'backend' && (github.event_name == 'push' || inputs.service == 'all' || inputs.service == 'backend')
      with:
        context: ./backend
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha,scope=backend
        cache-to: type=gha,mode=max,scope=backend
    
    - name: Build and push frontend (cached)
      uses: docker/build-push-action@v6
      if: matrix.service == 'frontend' && (github.event_name == 'push' || inputs.service == 'all' || inputs.service == 'frontend')
      with:
        context: ./frontend
        build-args: |
          REACT_APP_API_BASE_URL=http://dgh-helpdesk-backend-westus2.westus2.azurecontainer.io:8080
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha,scope=frontend
        cache-to: type=gha,mode=max,scope=frontend

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy or update ACI containers (update with recreate fallback)
      run: |
        set -e
        echo "Ensuring backend container exists..."
        if az container show --resource-group ${{ env.RESOURCE_GROUP }} --name dgh-helpdesk-backend >/dev/null 2>&1; then
          echo "Attempting backend in-place update..."
          set +e
          az container update \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name dgh-helpdesk-backend \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME_BACKEND }}:latest \
            --output table
          UPDATE_RC=$?
          set -e
          if [ "$UPDATE_RC" -ne 0 ]; then
            echo "az container update unsupported; recreating backend container..."
            az container delete --resource-group ${{ env.RESOURCE_GROUP }} --name dgh-helpdesk-backend --yes || true
            az container create \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name dgh-helpdesk-backend \
              --image ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME_BACKEND }}:latest \
              --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }} \
              --registry-username ${{ secrets.ACR_USERNAME }} \
              --registry-password ${{ secrets.ACR_PASSWORD }} \
              --os-type Linux \
              --cpu 1 \
              --memory 2 \
              --ports 8080 \
              --environment-variables SPRING_PROFILES_ACTIVE=prod JAVA_OPTS="-XX:MaxRAMPercentage=75 -XX:+UseContainerSupport" \
              --secure-environment-variables LDAP_SERVER_URL="${{ secrets.LDAP_SERVER_URL }}" LDAP_SERVER_DOMAIN="${{ secrets.LDAP_SERVER_DOMAIN }}" LDAP_SERVER_BIND_USER="${{ secrets.LDAP_SERVER_BIND_USER }}" LDAP_SERVER_BIND_PASSWORD="${{ secrets.LDAP_SERVER_BIND_PASSWORD }}" LDAP_SERVER_SEARCH_BASE="${{ secrets.LDAP_SERVER_SEARCH_BASE }}" JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              --restart-policy Always \
              --dns-name-label dgh-helpdesk-backend-westus2 \
              --location "${{ env.LOCATION }}" \
              --output table
          fi
        else
          echo "Creating backend container in West US 2..."
          az container create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name dgh-helpdesk-backend \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME_BACKEND }}:latest \
            --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }} \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --os-type Linux \
            --cpu 1 \
            --memory 2 \
            --ports 8080 \
            --environment-variables SPRING_PROFILES_ACTIVE=prod JAVA_OPTS="-XX:MaxRAMPercentage=75 -XX:+UseContainerSupport" \
            --secure-environment-variables LDAP_SERVER_URL="${{ secrets.LDAP_SERVER_URL }}" LDAP_SERVER_DOMAIN="${{ secrets.LDAP_SERVER_DOMAIN }}" LDAP_SERVER_BIND_USER="${{ secrets.LDAP_SERVER_BIND_USER }}" LDAP_SERVER_BIND_PASSWORD="${{ secrets.LDAP_SERVER_BIND_PASSWORD }}" LDAP_SERVER_SEARCH_BASE="${{ secrets.LDAP_SERVER_SEARCH_BASE }}" JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            --restart-policy Always \
            --dns-name-label dgh-helpdesk-backend-westus2 \
            --location "${{ env.LOCATION }}" \
            --output table
        fi

        echo "Ensuring frontend container exists..."
        if az container show --resource-group ${{ env.RESOURCE_GROUP }} --name dgh-helpdesk-frontend >/dev/null 2>&1; then
          echo "Attempting frontend in-place update..."
          set +e
          az container update \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name dgh-helpdesk-frontend \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME_FRONTEND }}:latest \
            --output table
          UPDATE_RC=$?
          set -e
          if [ "$UPDATE_RC" -ne 0 ]; then
            echo "az container update unsupported; recreating frontend container..."
            az container delete --resource-group ${{ env.RESOURCE_GROUP }} --name dgh-helpdesk-frontend --yes || true
            az container create \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name dgh-helpdesk-frontend \
              --image ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME_FRONTEND }}:latest \
              --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }} \
              --registry-username ${{ secrets.ACR_USERNAME }} \
              --registry-password ${{ secrets.ACR_PASSWORD }} \
              --os-type Linux \
              --cpu 0.5 \
              --memory 1 \
              --ports 80 \
              --restart-policy Always \
              --dns-name-label dgh-helpdesk-frontend-westus2 \
              --location "${{ env.LOCATION }}" \
              --output table
          fi
        else
          echo "Creating frontend container..."
          az container create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name dgh-helpdesk-frontend \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME_FRONTEND }}:latest \
            --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }} \
            --registry-username ${{ secrets.ACR_USERNAME }} \
            --registry-password ${{ secrets.ACR_PASSWORD }} \
            --os-type Linux \
            --cpu 0.5 \
            --memory 1 \
            --ports 80 \
            --restart-policy Always \
            --dns-name-label dgh-helpdesk-frontend-westus2 \
            --location "${{ env.LOCATION }}" \
            --output table
        fi

    - name: Wait for backend readiness (fast loop)
      run: |
        BACKEND_FQDN=$(az container show --resource-group ${{ env.RESOURCE_GROUP }} --name dgh-helpdesk-backend --query "ipAddress.fqdn" --output tsv)
        echo "Waiting for backend at http://${BACKEND_FQDN}:8080/api/health ..."
        for i in {1..30}; do
          if curl -fsS --max-time 3 "http://${BACKEND_FQDN}:8080/api/health" >/dev/null; then
            echo "Backend is ready."
            exit 0
          fi
          sleep 2
        done
        echo "Backend readiness timed out" && exit 1
    
    - name: Get deployment URLs
      run: |
        echo "=== Deployment Complete ==="
        echo "Backend URL: http://$(az container show --resource-group ${{ env.RESOURCE_GROUP }} --name dgh-helpdesk-backend --query "ipAddress.fqdn" --output tsv):8080"
        echo "Frontend URL: http://$(az container show --resource-group ${{ env.RESOURCE_GROUP }} --name dgh-helpdesk-frontend --query "ipAddress.fqdn" --output tsv)"
        echo "=== Your application is now running! ==="
